REST API란?
RESTful 하게 API를 만들어야한다(REST API에 의거해서 만들어야 한다) >> 일련의 API서버 작성 룰

1. 우선 API (Application Programming Interface)
서로 다른 프로그램 간의 통신을 위한 통신규약

웹 기준으로는 클라이언트와 서버 사이 통신 규약 / 데이터를 가져오는 방법 ex) write.html을 보고 싶으면 /write로 접속하라는 API를 정의함

이런 웹 API들을 어떤 식으로 만들면 좋을지에 대한 것이 REST


2. REST(Representational State Transfer) API
기존 API에 일관성이 없어 Roy Fielding이 제창

HTTP 요청(GET, POST, PUT, DELETE) 시스템을 유효 활용하여 REST 원칙에 의거해 API를 작성하자


REST 원칙
1. Uniform I/F : (간결하고 일관적이고 예측가능한 url) 일관된 I/F
하나의 자료는 하나의 url(uri) / 예측 가능 / 요청과 응답은 정보가 충분히 들어있어야함

>> 1이 가장 중요 : URL만 딱 보고도 어떤 역할인지 예측이 되야함
ex instagram.com/explore/tags/kpop >> 딱봐도 tag검색으로 kpop검색

>> URI는 URL보다 좀 더 큰 개념 자료의 위치 + 자료 자체의 분류 지칭 개념까지(URN)

이름짓기 원칙

1url을 명사로 작성 (동사는 HTTP 요청 메서드가 최대한 다 맡을 수 있도록)
2하위 문서를 나타낼땐 /
3파일 확장자는 표시 X
4띄어쓰기는 -로 표현
5자료 하나당 하나의 URL


=============================================================================================================================

2. Client-Server의 관계, 역할 구분을 명확히 해라 : 브라우저는 요청만 서버는 응답만 할뿐 (브라우저가 막 서버에게 처리에 대한 세부를 시키면 X)
>> URL하나로 데이터를 꺼낼 수 있음 / 서버에 명령까지 시키면 안되고 요청만

3. Stateless : 클라이언트의 요청은 서로 독립적이어야 함 (요청 1에 의해 요청2가 된다거나 하면 안됨)
>> 요청 하나만으로 필요한 데이터를 가져오도록

4. Cacheable : 서버에서 보내주는 정보는 캐싱이 가능해야하며(캐시가능 표시, 기간 등) 캐싱을 위한 버전 관리 등을 잘 해야함 (이건 사실 브라우저가 잘 해줌)

캐싱 : 자주 사용하는 이미지 파일이나 CSS파일 등을 브라우저가 캐시에 저장하여 바로 불러올 수 있게 함

5. Layerd System : 요청 처리는 여러 단계(Layer)를 거쳐 처리하게 함 / 머 컨트롤러에서 받아 service repository db 이렇게 처리 단계를 거치게

6. Code on Demand 
